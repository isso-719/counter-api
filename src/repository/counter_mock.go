// Code generated by MockGen. DO NOT EDIT.
// Source: counter.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	"github.com/golang/mock/gomock"
	domain "github.com/isso-719/counter-api/src/domain"
	reflect "reflect"
)

// MockIFCounterRepository is a mock of IFCounterRepository interface.
type MockIFCounterRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIFCounterRepositoryMockRecorder
}

// MockIFCounterRepositoryMockRecorder is the mock recorder for MockIFCounterRepository.
type MockIFCounterRepositoryMockRecorder struct {
	mock *MockIFCounterRepository
}

// NewMockIFCounterRepository creates a new mock instance.
func NewMockIFCounterRepository(ctrl *gomock.Controller) *MockIFCounterRepository {
	mock := &MockIFCounterRepository{ctrl: ctrl}
	mock.recorder = &MockIFCounterRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFCounterRepository) EXPECT() *MockIFCounterRepositoryMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockIFCounterRepository) BeginTx(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockIFCounterRepositoryMockRecorder) BeginTx(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockIFCounterRepository)(nil).BeginTx), ctx)
}

// CommitTx mocks base method.
func (m *MockIFCounterRepository) CommitTx() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitTx")
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitTx indicates an expected call of CommitTx.
func (mr *MockIFCounterRepositoryMockRecorder) CommitTx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitTx", reflect.TypeOf((*MockIFCounterRepository)(nil).CommitTx))
}

// TxRead mocks base method.
func (m *MockIFCounterRepository) TxRead(key string) (*domain.Counter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxRead", key)
	ret0, _ := ret[0].(*domain.Counter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TxRead indicates an expected call of TxRead.
func (mr *MockIFCounterRepositoryMockRecorder) TxRead(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxRead", reflect.TypeOf((*MockIFCounterRepository)(nil).TxRead), key)
}

// TxWrite mocks base method.
func (m *MockIFCounterRepository) TxWrite(key string, value *domain.Counter) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxWrite", key, value)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TxWrite indicates an expected call of TxWrite.
func (mr *MockIFCounterRepositoryMockRecorder) TxWrite(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxWrite", reflect.TypeOf((*MockIFCounterRepository)(nil).TxWrite), key, value)
}
